import _ from 'lodash';

export default [                    // This ResourceConverter is using an [] instead of {}.
  // Key names of RC are assumed from their posision in the array:

  'rxjs5-custom-build',             // `name` & flags as a String at pos 0

  `
  Build your *own custom build of RxJS 5*, with a custom Observable with added (patched) operators on streams 
  (eg 'map', 'filter' etc), along with static methods attached to Observable (like 'Observable.fromEvent') 
  as you would expect (i.e Rx.Observable.fromEvent() or clicks.filter()) 
  `,

  ['rxjs5-custom-build.js'],        // an [] of `filez` as in http://urequire.org/masterdefaultsconfig.coffee#bundle.filez, at pos 2

  function () {                            // `convert` Function (the actual beef) at pos 3
    return ` 
      import { Observable } from 'rxjs/Observable';

      // operators on Observables sequences (i.e instances of Observable) to be added
      // i.e "patch Observable with appropriate methods" as described in rxjs docs
      ${ _(this.options.addOperators)
      .map(imp => `import 'rxjs/add/operator/${imp}';`)
      .value()
      .join('\n') }

      // static imports
      // @todo: static imports don't automatically get attached to Observable
      ${ _(this.options.staticImports)
      .map(imp =>
        `import {${ imp }} from 'rxjs/observable/${imp}' 
             Observable.${imp} = ${imp};`)
      .value()
      .join('\n') }

      export default exports; // exports stands as the Rx object, which should be the default exports object for ES6 
      export { Observable, VERSION};
    `
  },

  { // default options object
    addOperators: [ 'map', 'filter' ],
    staticImports: [ 'from' ]
    //es6: true // @todo: not implemented (it acts as always true) - ie NO ES5 code generation, only ES6
  }
]
